// BattleManager.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π (–≤–µ—Ä—Å–∏—è –±–µ–∑ –∏–Ω–ª–∞–π–Ω-—Å—Ç–∏–ª–µ–π)

export class BattleManager {
    constructor(game, uiManager, gameState) {
        this.game = game;
        this.ui = uiManager;
        this.gameState = gameState;
        this.battleOverlay = null;
        this.battlePanel = null;
        this.createBattleUI();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ UI –¥–ª—è –±–∏—Ç–≤—ã
     */
    createBattleUI() {
        // –°–æ–∑–¥–∞–µ–º overlay –¥–ª—è –±–∏—Ç–≤—ã
        this.battleOverlay = this._createElement('div', 'battleOverlay');
        this.battleOverlay.id = 'battleOverlay';

        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –±–∏—Ç–≤—ã
        this.battlePanel = this._createElement('div', 'battlePanel');
        this.battlePanel.id = 'battlePanel';

        this.battleOverlay.appendChild(this.battlePanel);
        document.body.appendChild(this.battleOverlay);
    }

    /**
     * –ù–∞—á–∞–ª–æ –±–∏—Ç–≤—ã —Å –º–æ–Ω—Å—Ç—Ä–æ–º
     * @param {Monster} monster - –ú–æ–Ω—Å—Ç—Ä –¥–ª—è –±–∏—Ç–≤—ã
     * @param {number} monsterIndex - –ò–Ω–¥–µ–∫—Å –º–æ–Ω—Å—Ç—Ä–∞ –≤ –º–∞—Å—Å–∏–≤–µ –æ–±—ä–µ–∫—Ç–æ–≤
     */
    startBattle(monster, monsterIndex) {
        console.log('Starting battle with monster');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º GameState –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏—Ç–≤–æ–π
        this.gameState.startBattle(monster, monsterIndex);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º UI –±–∏—Ç–≤—ã
        this.battleOverlay.style.display = 'block';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
        this.ui.addLog(`‚öîÔ∏è –ù–∞—á–∞–ª–∞—Å—å –±–∏—Ç–≤–∞ —Å –º–æ–Ω—Å—Ç—Ä–æ–º! HP: ${monster.getHpString()}`, 'warning');
        
        this.updateBattleUI();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –±–∏—Ç–≤—ã
     */
    updateBattleUI() {
        if (!this.gameState.currentMonster || !this.gameState.battleActive) return;

        this.battlePanel.innerHTML = '';

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–∏—Ç–≤—ã
        const title = this._createElement('h2', 'battle-title');
        title.innerHTML = '‚öîÔ∏è –ë–ò–¢–í–ê –° –ú–û–ù–°–¢–†–û–ú ‚öîÔ∏è';
        this.battlePanel.appendChild(title);

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω—Å—Ç—Ä–µ
        const monsterInfo = this._createElement('div', 'battle-monster-info');
        monsterInfo.innerHTML = `
            <div class="battle-monster-title">üêâ <strong>–ú–æ–Ω—Å—Ç—Ä</strong></div>
            <div class="battle-monster-hp">üíñ <strong>HP:</strong> ${this.gameState.currentMonster.getHpString()}</div>
        `;
        this.battlePanel.appendChild(monsterInfo);

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ
        const playerInfo = this._createElement('div', 'battle-player-info');
        playerInfo.innerHTML = `
            <div class="battle-player-title">üßô <strong>–í–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã</strong></div>
            <div class="battle-player-resources">${this.ui.formatResources(this.gameState.player.resources)}</div>
        `;
        this.battlePanel.appendChild(playerInfo);

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
        const spellsContainer = this._createElement('div', 'battle-spells-container');

        const spellsTitle = this._createElement('h3', 'battle-spells-title');
        spellsTitle.textContent = '‚ú® –ë–æ–µ–≤—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è:';
        spellsContainer.appendChild(spellsTitle);

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        const combatSpells = this.getCombatSpells();
        
        console.log('Combat spells found:', combatSpells.length); // –û—Ç–ª–∞–¥–∫–∞
        
        if (combatSpells.length === 0) {
            const noSpells = this._createElement('div', 'battle-no-spells');
            noSpells.textContent = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ–µ–≤—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π';
            spellsContainer.appendChild(noSpells);
        } else {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –±–∏—Ç–≤—ã
            this.gameState.resetActionMappings();
            
            combatSpells.forEach((spell, index) => {
                const actionKey = index + 1;
                const spellBtn = this.createBattleButton(
                    `${spell.name}`,
                    `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${this.ui.formatResources(spell.cost)} | –£—Ä–æ–Ω: ${this.ui.formatResources(spell.damage)}`,
                    this.gameState.player.canAfford(spell.cost),
                    () => this.useSpell(spell)
                );
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è
                const button = spellBtn.querySelector('.battle-button');
                const hotkey = this._createElement('span', 'battle-hotkey');
                hotkey.textContent = actionKey;
                button.insertBefore(hotkey, button.firstChild);
                
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ GameState
                this.gameState.addAction(actionKey, () => this.useSpell(spell), `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ: ${spell.name}`);
                
                spellsContainer.appendChild(spellBtn);
            });
        }

        this.battlePanel.appendChild(spellsContainer);

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–±–µ–≥–∞
        const fleeActionKey = combatSpells.length + 1;
        const fleeBtn = this.createBattleButton(
            'üèÉ –°–±–µ–∂–∞—Ç—å –∏–∑ –±–∏—Ç–≤—ã',
            '–ü–æ–∫–∏–Ω—É—Ç—å –±–∏—Ç–≤—É –±–µ–∑ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è',
            true,
            () => this.fleeBattle(),
            'flee-button'
        );
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–±–µ–≥–∞
        const fleeButton = fleeBtn.querySelector('.battle-button');
        const fleeHotkey = this._createElement('span', 'battle-hotkey');
        fleeHotkey.textContent = fleeActionKey;
        fleeButton.insertBefore(fleeHotkey, fleeButton.firstChild);
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–±–µ–≥–∞
        this.gameState.addAction(fleeActionKey, () => this.fleeBattle(), '–°–±–µ–∂–∞—Ç—å –∏–∑ –±–∏—Ç–≤—ã');
        
        this.battlePanel.appendChild(fleeBtn);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–µ–≤—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
     * –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    getCombatSpells() {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
        let spells = [];
        
        // 1. –ò–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ CONFIG
        if (typeof CONFIG !== 'undefined' && CONFIG.SPELLS) {
            spells = CONFIG.SPELLS.filter(s => s.combat);
        }
        // 2. –ò–∑ this.game.config
        else if (this.game && this.game.config && this.game.config.SPELLS) {
            spells = this.game.config.SPELLS.filter(s => s.combat);
        }
        // 3. –ò–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞ config
        else if (this.game && this.game.CONFIG && this.game.CONFIG.SPELLS) {
            spells = this.game.CONFIG.SPELLS.filter(s => s.combat);
        }
        // 4. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏–º–ø–æ—Ä—Ç
        else {
            try {
                // –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –º–æ–¥—É–ª—å
                const { SPELLS } = await import('./spells.js');
                spells = SPELLS.filter(s => s.combat);
            } catch (e) {
                console.warn('Could not import spells:', e);
                // –§–æ–ª–ª–±—ç–∫ - —Ö–∞—Ä–¥–∫–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
                spells = [
                    {
                        name: '–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä',
                        cost: { '‚ô†': 2, '‚ô¶': 1 },
                        damage: { '‚ô†': 2, '‚ô¶': 1 },
                        combat: true
                    },
                    {
                        name: '–õ—ë–¥',
                        cost: { '‚ô£': 1 },
                        damage: { '‚ô£': 2 },
                        combat: true
                    }
                ];
            }
        }
        
        console.log('Found combat spells:', spells); // –û—Ç–ª–∞–¥–∫–∞
        return spells;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–∏—Ç–≤—ã
     */
    createBattleButton(title, description, enabled, onClick, additionalClass = '') {
        const container = this._createElement('div', 'battle-button-container');

        const btn = this._createElement('button', `battle-button ${additionalClass}`);
        btn.disabled = !enabled;

        const content = this._createElement('div', 'battle-button-content');
        const titleDiv = this._createElement('div', 'battle-button-title');
        titleDiv.textContent = title;
        
        const descDiv = this._createElement('div', 'battle-button-description');
        descDiv.textContent = description;

        content.appendChild(titleDiv);
        content.appendChild(descDiv);
        btn.appendChild(content);

        if (enabled) {
            btn.addEventListener('click', onClick);
        }

        container.appendChild(btn);
        return container;
    }

    /**
     * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –≤ –±–∏—Ç–≤–µ
     * @param {Object} spell - –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    useSpell(spell) {
        if (!this.gameState.player.canAfford(spell.cost)) {
            this.ui.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤!', 'error');
            return;
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ GameState
        if (!this.gameState.castSpell(spell)) {
            this.ui.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ!', 'error');
            return;
        }
        
        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –º–æ–Ω—Å—Ç—Ä—É
        this.gameState.currentMonster.receiveDamage(spell.damage);
        
        this.ui.addLog(
            `‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ "${spell.name}" - —É—Ä–æ–Ω: ${this.ui.formatResources(spell.damage)}`,
            'success'
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–º–µ—Ä –ª–∏ –º–æ–Ω—Å—Ç—Ä
        if (this.gameState.currentMonster.isDead()) {
            this.ui.addLog('üèÜ –ú–æ–Ω—Å—Ç—Ä –ø–æ–±–µ–∂–¥–µ–Ω!', 'success');
            this.victoryBattle();
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –±–∏—Ç–≤—ã
            this.updateBattleUI();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π UI –∏–≥—Ä—ã
        this.game.updateUI();
    }

    /**
     * –ü–æ–±–µ–¥–∞ –≤ –±–∏—Ç–≤–µ
     */
    victoryBattle() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º GameState –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–æ–π
        this.gameState.victoryBattle();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ
        this.ui.showNotification('–ú–æ–Ω—Å—Ç—Ä –ø–æ–±–µ–∂–¥–µ–Ω! üèÜ', 'success');
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –±–∏—Ç–≤—É
        this.endBattle();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤
        this.game.generateObjects();
    }

    /**
     * –ü–æ–±–µ–≥ –∏–∑ –±–∏—Ç–≤—ã
     */
    fleeBattle() {
        this.ui.addLog('üèÉ –í—ã —Å–±–µ–∂–∞–ª–∏ –∏–∑ –±–∏—Ç–≤—ã', 'warning');
        this.ui.showNotification('–í—ã —Å–±–µ–∂–∞–ª–∏ –∏–∑ –±–∏—Ç–≤—ã', 'warning');
        this.endBattle();
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–∏—Ç–≤—ã
     */
    endBattle() {
        console.log('Ending battle');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º GameState –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –±–∏—Ç–≤—ã
        this.gameState.endBattle();
        
        // –°–∫—Ä—ã–≤–∞–µ–º UI –±–∏—Ç–≤—ã
        this.battleOverlay.style.display = 'none';
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è
        setTimeout(() => {
            if (this.gameState.paused && !this.gameState.battleActive) {
                console.log('Game still paused after battle, force unpausing');
                this.gameState.paused = false;
            }
        }, 100);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–∏—Ç–≤—ã
     * @returns {boolean}
     */
    isBattleActive() {
        return this.gameState.battleActive;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∏—Ç–≤—ã
     */
    cleanup() {
        if (this.battleOverlay && this.battleOverlay.parentNode) {
            this.battleOverlay.parentNode.removeChild(this.battleOverlay);
            this.battleOverlay = null;
            this.battlePanel = null;
        }
        
        this.gameState.resetBattle();
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å CSS-–∫–ª–∞—Å—Å–∞–º–∏
     * @param {string} tag - HTML —Ç–µ–≥
     * @param {string} className - CSS –∫–ª–∞—Å—Å(—ã)
     * @param {string} id - ID —ç–ª–µ–º–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * @returns {HTMLElement}
     */
    _createElement(tag, className = '', id = null) {
        const element = document.createElement(tag);
        if (className) element.className = className;
        if (id) element.id = id;
        return element;
    }
}