const { useState, useEffect, useCallback, useRef } = React;

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò (MOCK DATA) =====
const CONFIG = {
    ROWS: 8,
    COLS: 12,
    MONSTER_COUNT: 5,
    OBJECT_CONFIG: OBJECT_CONFIGS.reduce((acc, config) => {
        acc[config.type] = config;
        return acc;
    }, {}),
    SPELLS: SPELLS,
    SURFACES: SURFACES
};

// ===== –£–¢–ò–õ–ò–¢–´ =====
const formatResources = (obj) => {
    return Object.entries(obj).map(([k, v]) => `${k}${v}`).join(' ');
};

// ===== –ö–õ–ê–°–°–´ –ò–ì–†–û–í–´–• –û–ë–™–ï–ö–¢–û–í =====
class GameObject {
    constructor(x, y, type) {
        this.x = x;
        this.y = y;
        this.type = type;
        this.config = CONFIG.OBJECT_CONFIG[type];
        this.id = Math.random().toString(36).substr(2, 9);
    }

    interact(player) {
        if (this.config.resourceGain) {
            for (let res in this.config.resourceGain) {
                player.resources[res] = (player.resources[res] || 0) + this.config.resourceGain[res];
            }
        }
    }
}

class Monster extends GameObject {
    constructor(x, y) {
        super(x, y, 'monster');
        this.hp = { '‚ô†': 2, '‚ô£': 2, '‚ô¶': 1 };
        this.maxHp = { '‚ô†': 2, '‚ô£': 2, '‚ô¶': 1 };
    }

    receiveDamage(damage, player) {
        for (let res in damage) {
            const taken = Math.min(this.hp[res] || 0, damage[res]);
            this.hp[res] = Math.max(0, (this.hp[res] || 0) - taken);
            player.resources[res] = (player.resources[res] || 0) + taken;
        }
    }

    isDead() {
        return Object.values(this.hp).every(val => val === 0);
    }

    getHpString() {
        return Object.entries(this.hp).map(([k, v]) => `${k}${v}`).join(' ');
    }

    attack(player) {
        const damage = { '‚ô†': 1, '‚ô£': 1 };
        let canTakeDamage = false;
        
        for (let res in damage) {
            if ((player.resources[res] || 0) >= damage[res]) {
                canTakeDamage = true;
                break;
            }
        }
        
        if (canTakeDamage) {
            for (let res in damage) {
                const taken = Math.min(player.resources[res] || 0, damage[res]);
                player.resources[res] = Math.max(0, (player.resources[res] || 0) - taken);
            }
            return `–ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫–æ–≤–∞–ª! –ü–æ—Ç–µ—Ä—è–Ω—ã —Ä–µ—Å—É—Ä—Å—ã: ${formatResources(damage)}`;
        } else {
            return '–ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫–æ–≤–∞–ª, –Ω–æ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —É—Ä–æ–Ω–∞';
        }
    }
}

// ===== –ì–ï–ù–ï–†–ê–¢–û–† –ú–ï–°–¢–ù–û–°–¢–ò =====
class TerrainManager {
    constructor(rows, cols, surfaces) {
        this.rows = rows;
        this.cols = cols;
        this.surfaces = surfaces;
        this.seedX = Math.random() * 1000;
        this.seedY = Math.random() * 1000;
        this.map = this.generate();
    }

    noise(x, y) {
        return Math.sin((x + this.seedX) * 3.14 + (y + this.seedY) * 1.618) * 
               Math.cos((y + this.seedY) * 3.14 + (x + this.seedX) * 1.618);
    }

    generate(scale = Math.random() * 0.3 + 0.1) {
        const map = [];
        for (let y = 0; y < this.rows; y++) {
            const row = [];
            for (let x = 0; x < this.cols; x++) {
                const v = (this.noise(x * scale, y * scale) + 1) / 2;
                let idx = Math.floor(v * this.surfaces.length);
                idx = Math.min(idx, this.surfaces.length - 1);
                let tile = this.surfaces[idx];
                if (Math.random() > tile.probability) {
                    tile = this.surfaces.find(s => Math.random() <= s.probability) || tile;
                }
                row.push(tile.id);
            }
            map.push(row);
        }
        return map;
    }

    getSurface(id) {
        return this.surfaces.find(s => s.id === id);
    }
}

// ===== UI –ö–û–ú–ü–û–ù–ï–ù–¢–´ =====

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ—Å—É—Ä—Å–∞
const ResourceItem = ({ symbol, amount }) => (
    <span className="resource">
        {symbol} {amount}
    </span>
);

// –ü–∞–Ω–µ–ª—å —Ä–µ—Å—É—Ä—Å–æ–≤
const ResourcesPanel = ({ resources }) => (
    <div className="resources-panel">
        <h3>–†–µ—Å—É—Ä—Å—ã:</h3>
        <div className="resources">
            {Object.entries(resources).map(([symbol, amount]) => (
                <ResourceItem key={symbol} symbol={symbol} amount={amount} />
            ))}
        </div>
    </div>
);

// –ö–ª–µ—Ç–∫–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
const TerrainCell = ({ x, y, surface, isPlayerHere, objectHere }) => (
    <div
        className="terrain-cell"
        style={{ backgroundColor: surface?.color }}
        title={`${surface?.name} (${x}, ${y})`}
    >
        <div className="surface-emoji">{surface?.emoji}</div>
        {isPlayerHere && <div className="player">üßô‚Äç‚ôÇÔ∏è</div>}
        {objectHere && (
            <div className="game-object">
                {objectHere.config.emoji}
            </div>
        )}
    </div>
);

// –†—è–¥ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
const TerrainRow = ({ y, cols, terrainManager, player, gameObjects }) => (
    <div className="terrain-row">
        {Array.from({ length: cols }, (_, x) => {
            const terrain = terrainManager?.map || [];
            const surface = terrainManager?.getSurface(terrain[y]?.[x]);
            const isPlayerHere = player.x === x && player.y === y;
            const objectHere = gameObjects.find(obj => obj.x === x && obj.y === y);
            
            return (
                <TerrainCell
                    key={x}
                    x={x}
                    y={y}
                    surface={surface}
                    isPlayerHere={isPlayerHere}
                    objectHere={objectHere}
                />
            );
        })}
    </div>
);

// –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
const GameArea = ({ rows, cols, terrainManager, player, gameObjects }) => (
    <div className="game-area">
        <div className="terrain-grid">
            {Array.from({ length: rows }, (_, y) => (
                <TerrainRow
                    key={y}
                    y={y}
                    cols={cols}
                    terrainManager={terrainManager}
                    player={player}
                    gameObjects={gameObjects}
                />
            ))}
        </div>
    </div>
);

// –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
const ActionButton = ({ 
    actionKey, 
    emoji, 
    title, 
    cost, 
    gain, 
    canUse, 
    onClick, 
    className = "action-button" 
}) => (
    <button
        className={`${className} ${!canUse ? 'disabled' : ''}`}
        onClick={onClick}
        disabled={!canUse}
    >
        {actionKey && <span className="hotkey">{actionKey}</span>}
        {emoji && <span className="spell-emoji">{emoji}</span>}
        <div className="button-content">
            <div className="button-title">{title}</div>
            <div className="button-cost">
                {cost && Object.keys(cost).length > 0 && 
                    `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${formatResources(cost)}`
                }
                {cost && gain && Object.keys(cost).length > 0 && ' ‚Üí '}
                {gain && `–ü–æ–ª—É—á–∏—Ç—å: ${formatResources(gain)}`}
            </div>
        </div>
    </button>
);

// –ë–æ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
const BattleSpellButton = ({ spell, actionKey, canUse, onUseSpell }) => (
    <ActionButton
        actionKey={actionKey}
        emoji={spell.emoji}
        title={spell.name}
        cost={spell.cost}
        gain={spell.damage ? `–£—Ä–æ–Ω: ${formatResources(spell.damage)}` : null}
        canUse={canUse}
        onClick={() => onUseSpell(spell)}
        className="battle-button"
    />
);

// –ü–∞–Ω–µ–ª—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
const SpellsPanel = ({ spells, actionMappings, canAfford, onUseSpell }) => (
    <div className="spells-panel">
        <h3>–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è</h3>
        {spells.filter(s => !s.combat).map((spell) => {
            const actionKey = Object.keys(actionMappings).find(key => 
                actionMappings[key].description === `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ: ${spell.name}`
            );
            const canUse = canAfford(spell.cost);
            
            return (
                <ActionButton
                    key={spell.name}
                    actionKey={actionKey}
                    emoji={spell.emoji}
                    title={spell.name}
                    cost={spell.cost}
                    canUse={canUse}
                    onClick={() => onUseSpell(spell)}
                />
            );
        })}
    </div>
);

// –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
const TerrainActionsPanel = ({ 
    terrainManager, 
    player, 
    actionMappings, 
    canAfford, 
    onPerformTerrainAction 
}) => {
    const terrain = terrainManager?.map || [];
    const currentSurface = terrainManager?.getSurface(terrain[player.y]?.[player.x]);
    
    if (!currentSurface?.actions?.length) {
        return (
            <div className="terrain-actions">
                <h3>–î–µ–π—Å—Ç–≤–∏—è –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏</h3>
                <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π</p>
            </div>
        );
    }

    return (
        <div className="terrain-actions">
            <h3>–î–µ–π—Å—Ç–≤–∏—è –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏</h3>
            {currentSurface.actions.map((action) => {
                const actionKey = Object.keys(actionMappings).find(key => 
                    actionMappings[key].description === `–î–µ–π—Å—Ç–≤–∏–µ: ${action.label}`
                );
                const canUse = canAfford(action.cost);
                
                return (
                    <ActionButton
                        key={action.label}
                        actionKey={actionKey}
                        title={action.label}
                        cost={action.cost}
                        gain={action.gain}
                        canUse={canUse}
                        onClick={() => onPerformTerrainAction(action)}
                    />
                );
            })}
        </div>
    );
};

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω—Å—Ç—Ä–µ
const MonsterInfo = ({ monster }) => (
    <div className="monster-info">
        <h4>üêâ –ú–æ–Ω—Å—Ç—Ä</h4>
        <p>üíñ HP: {monster?.getHpString()}</p>
    </div>
);

// –ü–∞–Ω–µ–ª—å –±–æ–µ–≤—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
const BattleSpellsPanel = ({ spells, actionMappings, canAfford, onUseSpell }) => (
    <div className="battle-spells">
        <h4>‚ú® –ë–æ–µ–≤—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è:</h4>
        {spells.filter(s => s.combat).map((spell) => {
            const actionKey = Object.keys(actionMappings).find(key => 
                actionMappings[key].description === `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ: ${spell.name}`
            );
            const canUse = canAfford(spell.cost);
            
            return (
                <BattleSpellButton
                    key={spell.name}
                    spell={spell}
                    actionKey={actionKey}
                    canUse={canUse}
                    onUseSpell={onUseSpell}
                />
            );
        })}
    </div>
);

// –ö–Ω–æ–ø–∫–∞ –ø–æ–±–µ–≥–∞
const FleeButton = ({ actionMappings, onFlee }) => {
    const actionKey = Object.keys(actionMappings).find(key => 
        actionMappings[key].description === '–°–±–µ–∂–∞—Ç—å –∏–∑ –±–∏—Ç–≤—ã'
    );
    
    return (
        <button className="battle-button flee-button" onClick={onFlee}>
            <span className="hotkey">{actionKey}</span>
            üèÉ –°–±–µ–∂–∞—Ç—å –∏–∑ –±–∏—Ç–≤—ã
        </button>
    );
};

// –ü–∞–Ω–µ–ª—å –±–∏—Ç–≤—ã
const BattlePanel = ({ 
    monster, 
    spells, 
    actionMappings, 
    canAfford, 
    onUseSpell, 
    onFlee 
}) => (
    <div className="battle-panel">
        <h2>‚öîÔ∏è –ë–ò–¢–í–ê –° –ú–û–ù–°–¢–†–û–ú ‚öîÔ∏è</h2>
        <MonsterInfo monster={monster} />
        <BattleSpellsPanel 
            spells={spells}
            actionMappings={actionMappings}
            canAfford={canAfford}
            onUseSpell={onUseSpell}
        />
        <FleeButton actionMappings={actionMappings} onFlee={onFlee} />
    </div>
);

// –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥–µ
const LogEntry = ({ entry }) => (
    <div className={`log-entry log-${entry.type}`}>
        <span className="log-time">[{entry.time}]</span>
        <span className="log-message">{entry.message}</span>
    </div>
);

// –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π
const GameLog = ({ gameLog }) => (
    <div className="game-log">
        <h3>–õ–æ–≥ —Å–æ–±—ã—Ç–∏–π</h3>
        <div className="log-content">
            {gameLog.slice(0, 10).map((entry) => (
                <LogEntry key={entry.id} entry={entry} />
            ))}
        </div>
    </div>
);

// –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
const Sidebar = ({ 
    battleState, 
    spells, 
    actionMappings, 
    canAfford, 
    onUseSpell, 
    onFlee,
    terrainManager,
    player,
    onPerformTerrainAction
}) => (
    <div className="sidebar">
        {!battleState.active ? (
            <>
                <SpellsPanel 
                    spells={spells}
                    actionMappings={actionMappings}
                    canAfford={canAfford}
                    onUseSpell={onUseSpell}
                />
                <TerrainActionsPanel
                    terrainManager={terrainManager}
                    player={player}
                    actionMappings={actionMappings}
                    canAfford={canAfford}
                    onPerformTerrainAction={onPerformTerrainAction}
                />
            </>
        ) : (
            <BattlePanel
                monster={battleState.monster}
                spells={spells}
                actionMappings={actionMappings}
                canAfford={canAfford}
                onUseSpell={onUseSpell}
                onFlee={onFlee}
            />
        )}
    </div>
);

// ===== –ì–õ–ê–í–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –ò–ì–†–´ =====
const RPGGame = () => {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    const [player, setPlayer] = useState({
        x: 0,
        y: 0,
        resources: { '‚ô†': 3, '‚ô¶': 5, '‚ô£': 2 }
    });
    
    const [gameObjects, setGameObjects] = useState([]);
    const [gameLog, setGameLog] = useState([]);
    const [battleState, setBattleState] = useState({
        active: false,
        monster: null,
        monsterIndex: -1
    });
    const [actionMappings, setActionMappings] = useState({});
    
    // –°—Å—ã–ª–∫–∏
    const terrainManagerRef = useRef(null);
    const gameContainerRef = useRef(null);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
    useEffect(() => {
        terrainManagerRef.current = new TerrainManager(CONFIG.ROWS, CONFIG.COLS, CONFIG.SURFACES);
        generateObjects();
        addLogEntry('üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.', 'system');
    }, []);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
    const generateObjects = useCallback(() => {
        const newObjects = [];
        const terrain = terrainManagerRef.current?.map || [];
        
        while (newObjects.filter(o => o instanceof Monster).length < CONFIG.MONSTER_COUNT) {
            const x = Math.floor(Math.random() * CONFIG.COLS);
            const y = Math.floor(Math.random() * CONFIG.ROWS);
            
            if (terrain[y] && terrain[y][x] !== 1 && (x !== player.x || y !== player.y)) {
                newObjects.push(new Monster(x, y));
            }
        }
        
        setGameObjects(newObjects);
    }, [player.x, player.y]);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
    const addLogEntry = useCallback((message, type = 'system') => {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = {
            time: timestamp,
            message: message,
            type: type,
            id: Date.now() + Math.random()
        };
        
        setGameLog(prev => [logEntry, ...prev.slice(0, 49)]);
    }, []);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const canAfford = useCallback((cost) => {
        return Object.entries(cost).every(([k, v]) => (player.resources[k] || 0) >= v);
    }, [player.resources]);

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const applyCost = useCallback((cost) => {
        setPlayer(prev => {
            const newResources = { ...prev.resources };
            for (let res in cost) {
                newResources[res] = (newResources[res] || 0) - cost[res];
            }
            return { ...prev, resources: newResources };
        });
    }, []);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    const gainResources = useCallback((gain) => {
        setPlayer(prev => {
            const newResources = { ...prev.resources };
            for (let res in gain) {
                newResources[res] = (newResources[res] || 0) + gain[res];
            }
            return { ...prev, resources: newResources };
        });
    }, []);

    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    const movePlayer = useCallback((dx, dy) => {
        if (battleState.active) return;
        
        const newX = player.x + dx;
        const newY = player.y + dy;
        
        if (newX >= 0 && newX < CONFIG.COLS && newY >= 0 && newY < CONFIG.ROWS) {
            const terrain = terrainManagerRef.current?.map || [];
            const surface = terrainManagerRef.current?.getSurface(terrain[newY][newX]);
            
            if (surface && canAfford(surface.moveCost)) {
                applyCost(surface.moveCost);
                setPlayer(prev => ({ ...prev, x: newX, y: newY }));
                addLogEntry(`üö∂ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ ${surface.name} (${newX}, ${newY})`, 'player');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
                setTimeout(() => interactWithObjects(newX, newY), 100);
            } else {
                addLogEntry('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è', 'error');
            }
        } else {
            addLogEntry('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≥—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ä—Ç—ã', 'error');
        }
    }, [player.x, player.y, battleState.active, canAfford, applyCost, addLogEntry]);

    // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
    const interactWithObjects = useCallback((x, y) => {
        const objIndex = gameObjects.findIndex(o => o.x === x && o.y === y);
        if (objIndex !== -1) {
            const obj = gameObjects[objIndex];
            if (obj instanceof Monster) {
                addLogEntry('‚öîÔ∏è –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –º–æ–Ω—Å—Ç—Ä–æ–º! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–æ–π.', 'monster');
                startBattle(obj, objIndex);
            } else {
                obj.interact(player);
                setPlayer(prev => {
                    const newResources = { ...prev.resources };
                    for (let res in obj.config.resourceGain) {
                        newResources[res] = (newResources[res] || 0) + obj.config.resourceGain[res];
                    }
                    return { ...prev, resources: newResources };
                });
                addLogEntry(`üí∞ –ù–∞–π–¥–µ–Ω ${obj.type}! –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ—Å—É—Ä—Å—ã: ${formatResources(obj.config.resourceGain)}`, 'player');
                setGameObjects(prev => prev.filter((_, i) => i !== objIndex));
            }
        }
    }, [gameObjects, player, addLogEntry]);

    // –ù–∞—á–∞–ª–æ –±–∏—Ç–≤—ã
    const startBattle = useCallback((monster, index) => {
        setBattleState({
            active: true,
            monster: monster,
            monsterIndex: index
        });
        addLogEntry(`‚öîÔ∏è –ù–∞—á–∞–ª–∞—Å—å –±–∏—Ç–≤–∞ —Å –º–æ–Ω—Å—Ç—Ä–æ–º! HP: ${monster.getHpString()}`, 'warning');
    }, [addLogEntry]);

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
    const useSpell = useCallback((spell) => {
        if (!canAfford(spell.cost)) {
            addLogEntry('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤!', 'error');
            return;
        }

        applyCost(spell.cost);
        addLogEntry(`‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ "${spell.name}"`, 'player');

        if (spell.combat && battleState.monster) {
            battleState.monster.receiveDamage(spell.damage, player);
            addLogEntry(`üí• –£—Ä–æ–Ω: ${formatResources(spell.damage)}`, 'player');
            
            if (battleState.monster.isDead()) {
                addLogEntry('üèÜ –ú–æ–Ω—Å—Ç—Ä –ø–æ–±–µ–∂–¥–µ–Ω!', 'success');
                endBattle();
                setTimeout(generateObjects, 100);
            } else {
                const attackMessage = battleState.monster.attack(player);
                addLogEntry(attackMessage, 'monster');
                setPlayer(prev => ({ ...prev, resources: { ...prev.resources } }));
            }
        } else if (spell.name === '–ü—Ä–∏–∑—ã–≤ —Å—É–Ω–¥—É–∫–∞') {
            const x = Math.floor(Math.random() * CONFIG.COLS);
            const y = Math.floor(Math.random() * CONFIG.ROWS);
            const terrain = terrainManagerRef.current?.map || [];
            
            if (terrain[y] && terrain[y][x] !== 1) {
                const chest = new GameObject(x, y, 'chest');
                setGameObjects(prev => [...prev, chest]);
                addLogEntry(`üì¶ –°—É–Ω–¥—É–∫ –ø—Ä–∏–∑–≤–∞–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏—é (${x}, ${y})`, 'player');
            } else {
                addLogEntry('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–∑–≤–∞—Ç—å —Å—É–Ω–¥—É–∫ - –º–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–æ', 'error');
            }
        }
    }, [canAfford, applyCost, addLogEntry, battleState, player, generateObjects]);

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–∏—Ç–≤—ã
    const endBattle = useCallback(() => {
        setBattleState({ active: false, monster: null, monsterIndex: -1 });
        setGameObjects(prev => prev.filter((_, i) => i !== battleState.monsterIndex));
        setActionMappings({});
    }, [battleState.monsterIndex]);

    // –ü–æ–±–µ–≥ –∏–∑ –±–∏—Ç–≤—ã
    const fleeBattle = useCallback(() => {
        addLogEntry('üèÉ –í—ã —Å–±–µ–∂–∞–ª–∏ –∏–∑ –±–∏—Ç–≤—ã', 'warning');
        endBattle();
    }, [addLogEntry, endBattle]);

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
    const performTerrainAction = useCallback((action) => {
        if (!canAfford(action.cost)) {
            addLogEntry('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤!', 'error');
            return;
        }

        applyCost(action.cost);
        gainResources(action.gain);
        addLogEntry(`üî® –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ "${action.label}" - –ø–æ–ª—É—á–µ–Ω–æ: ${formatResources(action.gain)}`, 'player');
    }, [canAfford, applyCost, gainResources, addLogEntry]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
    useEffect(() => {
        const handleKeyPress = (e) => {
            if (e.key >= '1' && e.key <= '9') {
                const action = actionMappings[parseInt(e.key)];
                if (action) {
                    action.callback();
                }
                return;
            }

            if (battleState.active) return;

            const directions = {
                'ArrowUp': [0, -1],
                'ArrowDown': [0, 1],
                'ArrowLeft': [-1, 0],
                'ArrowRight': [1, 0]
            };

            if (directions[e.key]) {
                e.preventDefault();
                const [dx, dy] = directions[e.key];
                movePlayer(dx, dy);
            }
        };

        document.addEventListener('keydown', handleKeyPress);
        return () => document.removeEventListener('keydown', handleKeyPress);
    }, [movePlayer, battleState.active, actionMappings]);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–µ–π—Å—Ç–≤–∏–π
    useEffect(() => {
        const newMappings = {};
        let actionIndex = 1;

        if (battleState.active) {
            // –ë–æ–µ–≤—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
            const combatSpells = CONFIG.SPELLS.filter(s => s.combat);
            combatSpells.forEach((spell) => {
                newMappings[actionIndex] = {
                    callback: () => useSpell(spell),
                    description: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ: ${spell.name}`
                };
                actionIndex++;
            });

            // –ö–Ω–æ–ø–∫–∞ –ø–æ–±–µ–≥–∞
            newMappings[actionIndex] = {
                callback: fleeBattle,
                description: '–°–±–µ–∂–∞—Ç—å –∏–∑ –±–∏—Ç–≤—ã'
            };
        } else {
            // –û–±—ã—á–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
            const nonCombatSpells = CONFIG.SPELLS.filter(s => !s.combat);
            nonCombatSpells.forEach((spell) => {
                newMappings[actionIndex] = {
                    callback: () => useSpell(spell),
                    description: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ: ${spell.name}`
                };
                actionIndex++;
            });

            // –î–µ–π—Å—Ç–≤–∏—è –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
            const terrain = terrainManagerRef.current?.map || [];
            const currentSurface = terrainManagerRef.current?.getSurface(terrain[player.y]?.[player.x]);
            if (currentSurface?.actions) {
                currentSurface.actions.forEach((action) => {
                    newMappings[actionIndex] = {
                        callback: () => performTerrainAction(action),
                        description: `–î–µ–π—Å—Ç–≤–∏–µ: ${action.label}`
                    };
                    actionIndex++;
                });
            }
        }

        setActionMappings(newMappings);
    }, [battleState.active, player.x, player.y, useSpell, fleeBattle, performTerrainAction]);

    return (
        <div className="rpg-game" ref={gameContainerRef} tabIndex={0}>
            <ResourcesPanel resources={player.resources} />
            
            <div className="game-layout">
                <GameArea 
                    rows={CONFIG.ROWS}
                    cols={CONFIG.COLS}
                    terrainManager={terrainManagerRef.current}
                    player={player}
                    gameObjects={gameObjects}
                />
                
                <Sidebar
                    battleState={battleState}
                    spells={CONFIG.SPELLS}
                    actionMappings={actionMappings}
                    canAfford={canAfford}
                    onUseSpell={useSpell}
                    onFlee={fleeBattle}
                    terrainManager={terrainManagerRef.current}
                    player={player}
                    onPerformTerrainAction={performTerrainAction}
                />
            </div>

            <GameLog gameLog={gameLog} />
   
        </div>
    );
};
